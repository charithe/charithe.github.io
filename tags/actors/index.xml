<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>actors on Ultracrepidarian</title>
    <link>/tags/actors/</link>
    <description>Recent content in actors on Ultracrepidarian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 17 May 2016 21:10:23 +0100</lastBuildDate><atom:link href="/tags/actors/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Akka Cluster On Kubernetes</title>
      <link>/posts/kubernetes-akka-cluster/</link>
      <pubDate>Tue, 17 May 2016 21:10:23 +0100</pubDate>
      
      <guid>/posts/kubernetes-akka-cluster/</guid>
      <description>One of the challenges of running an Akka cluster application is the bootstrapping step required to discover other nodes in the cluster. This post illustrates how to make use of Kubernetes headless services to deploy an Akka cluster that automatically discovers its peers.
Normally, Kubernetes services resolve to a single IP address belonging to one of the child containers that match the selection criteria. A headless service, on the other hand, return a list of all the IP addresses that are under its watch.</description>
    </item>
    
    <item>
      <title>Dynamic Akka Streams Using Stage Actors</title>
      <link>/posts/dynamic-akka-streams/</link>
      <pubDate>Sun, 15 May 2016 17:20:34 +0100</pubDate>
      
      <guid>/posts/dynamic-akka-streams/</guid>
      <description>Most stream processing frameworks require the implementer to define the processing logic using some sort of a DSL &amp;ndash; which then gets compiled and materialised into the framework&amp;rsquo;s primitives at run time. The user has very little control over the pipeline once it starts executing. Any changes to the processing stages requires a re-compilation and a re-deployment. Getting around this limitation is not impossible but requires inelegant and costly operations such as polling an external service or a data store for updates.</description>
    </item>
    
  </channel>
</rss>
